[{"url":"/basics/quick_start","content":"<script>\r\n  import { Tabs as Tab, TabItem } from 'flowbite-svelte';\r\n  import ListOfGuides from '$lib/components/listofGuides.svelte';\r\n    import Tabs from \"$lib/components/Tabs.md\"\r\n    import Bash from \"$lib/components/SmallComponents/Bash.md\"\r\n    import example0 from \"$lib/examples/intro_core_0.md\"\r\n    import example1 from \"$lib/examples/intro_core_1.md\"\r\n    import example2 from \"$lib/examples/intro_core_2.md\"\r\n    import example3 from \"$lib/examples/intro_core_3.md\"\r\n\timport example4 from \"$lib/examples/intro_core_4.md\"\r\n    //import FancyLink from '$lib/components/FancyLink.svelte';\r\n\r\n    const install = [\r\n        {title: \"Bun\", component: Bash, details: {runtime: \"bun\"}},\r\n        {title: \"Deno\", component: Bash, details: {runtime: \"deno\"}}\r\n    ]\r\n    const tab0 = [\r\n        {title: \"example\", component: example0, details: {runtime: \"one\"}},\r\n        {title: \"query validation\", component: example0, details: {runtime: \"two\"}},\r\n    ]\r\n\r\n    const tab1 = [\r\n        {title: \"example\", component: example1, details: {runtime: \"main\"}},\r\n        {title: \"query validation\", component: example1, details: {runtime: \"setup\"}}\r\n    ]\r\n\r\n    const tab2 = [\r\n        {title: \"main.ts\", component: example2, details: {runtime: \"main\"}},\r\n        {title: \"setup.ts\", component: example2, details: {runtime: \"setup\"}}\r\n    ]\r\n\r\n    const tab3 = [\r\n        {title: \"wrap\", component: example3, details: {runtime: \"main\"}},\r\n        {title: \"unit\", component: example3, details: {runtime: \"setup\"}}\r\n    ]\r\n\r\n\tconst tab4 = [\r\n        {title: \"lotery\", component: example4, details: {runtime: \"main\"}},\r\n        {title: \"weather forecast\", component: example4, details: {runtime: \"setup\"}}\r\n    ]\r\n</script>\r\n\r\n<svelte:head>\r\n\r\n<title>Quick Start with Vixeny Framework - Installation and Examples</title>\r\n<meta name=\"description\" content=\"Learn how to quickly start with the Vixeny framework. Find installation guides and code examples for Bun and Deno runtimes.\" />\r\n<meta name=\"keywords\" content=\"Vixeny, web development, framework, installation, Bun, Deno, JavaScript, TypeScript, coding examples, petitions, wrap function, functional programming, reusable code\" />\r\n<meta name=\"author\" content=\"Vixeny Team\" />\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n\r\n</svelte:head>\r\n\r\n# Welcome to Vixeny!\r\n\r\nWe’re happy to have you exploring our framework!. Vixeny is all about making web\r\ndevelopment straightforward and enjoyable, no matter your background in coding.\r\nWhether you're just starting out or looking to shift into a new style of\r\nprogramming, we’ve designed Vixeny to be as welcoming as possible.\r\n\r\n## So, What's this project?\r\n\r\nAn ecosystem of functional web tools, that aims to make code more:\r\n\r\n- `Open`: All our tools are exportable and can be used in other project.\r\n- `Reusable`: Make it once and use it again, every element can be reused and composed in many ways.\r\n- `Testable`: Thanks to its monolithic structure, it can be tested at any\r\n  state.\r\n- `Smart`: Asyncronless with an integrated system that helps you to detect bugs\r\n  and optimize your code on the fly.\r\n\r\n- `Safe and maintainable`: Everything is deterministic, and its object-based\r\n  structure allows the maintainers to easily add things without needing to push\r\n  broken code changes.\r\n\r\n- `Fast`: Fastest framework when it comes to `Request -> Response` handlers in not only Deno but\r\n  also Bun.\r\n\r\n<object type=\"image/svg+xml\" data=\"/d2/ecosystem.svg\"></object>\r\n\r\n## How?\r\n\r\nDon't sweat the fancy \"functional programming\" stuff. Vixeny is made to be friendly for everyone. Our guides are split into simple levels, so you only pick up what you actually need, step by step.\r\n\r\n## Why `Vixeny`?\r\n\r\nIt got its name because it’s like a coding style that’s easy to learn and still super rewarding. It helps you see everything clearly at any point.\r\n\r\nYou can copy, paste, and run all the examples. There’s an example for everything!\r\n\r\nNow, let’s go from zero to hero with Vixeny!\r\n\r\n## Quick start\r\n\r\nDesigned to be backward compatible and runtime agnostic, ensures that\r\ncode you write today will continue to work seamlessly in the future, whether\r\nyou're using Deno or Bun.\r\n\r\nReady to start? Just run these commands to install our templates:\r\n\r\n<Tab defaultClass=\"tab\">\r\n  <TabItem title=\"bun\" open>\r\n\r\n```bash\r\nbun create vixeny\r\n```\r\n\r\n</TabItem>\r\n  <TabItem title=\"deno\">\r\n\r\n```bash\r\nnpx create-vixeny\r\n```\r\n\r\n</TabItem>\r\n</Tab>\r\n\r\n## Petitions\r\n\r\nRoutes are called petitions. A petition is just an object with a path and a function f that does something when someone visits that path. Here’s a simple example:\r\n\r\n```javascript\r\nimport { petitions } from \"vixeny\";\r\n\r\n// Returning a `BodyInit`\r\nconst helloWorld = petitions.add()({\r\n  path: \"/hello\",\r\n  f: () => \"hello World!\",\r\n});\r\n\r\n// Returning a `Response`\r\nconst ping = petitions.add()({\r\n  path: \"/ping\",\r\n  f: () => new Response(\"pong\"),\r\n});\r\n\r\nconsole.log(helloWorld);\r\n```\r\n\r\n<object type=\"image/svg+xml\" data=\"/d2/petition_cycle.svg\"></object>\r\n\r\nNotice that even if you specify only `path` and `f`, the log output is:\r\n\r\n```javascript\r\n{\r\n  path: \"/hello\",\r\n  f: [Function: f],\r\n  type: \"base\",\r\n  o: undefined,\r\n  ... // More in the future\r\n}\r\n```\r\n\r\nVixeny’s architecture ensures that all petitions work across different versions right out of the box!\r\n\r\n### Reusability\r\n\r\nVixeny also offers two special petitions, `resolve` and `branch`, which we’ll show you later. For now, here's a quick look at what you can do:\r\n\r\n<Tabs data={tab0}/>\r\n\r\n<object type=\"image/svg+xml\" data=\"/d2/use_of_resolve.svg\"></object>\r\n\r\nIn practice, you'll rarely need to manually declare petitions like this, that's why we have `wrap`\r\n\r\n\r\n## Wrap\r\n\r\nThe `wrap` function helps you work with petitions without hassle. With `wrap`, you can:\r\n\r\n- Keep things clean and avoid side effects.\r\n- Test petitions without starting a server.\r\n- Debug easily.\r\n- Deploy quickly.\r\n- And much more!\r\n\r\n\r\n<Tabs data={tab1}/>\r\n\r\n\r\n### Testing\r\n\r\nYou can test everything without running a server and even mock parts of your code to try out different scenarios. \r\n\r\n<Tabs data={tab3}/>\r\n\r\n### Mocking\r\n\r\nSupports testing individual petitions by injecting values while **preserving their structure**:\r\n\r\n<Tabs data={tab4}/>\r\n\r\nVixeny is fully typed, so you get tooltips and hints right in your editor.\r\n\r\n## Keyboard mode\r\n\r\nDo you like to use your keyboard? Here some tips:\r\n\r\n| Shortcut | Action             |\r\n|----------|--------------------|\r\n| Shift + S | Focus search bar  |\r\n| Shift + A | Focus first element |\r\n| Shift + Z | Zen mode          |\r\n| Shift + L | Light / Dark mode |\r\n| Tab       | Jump faster!      |\r\n\r\n\r\n## Guides\r\n\r\nWant to learn more? We’ve got guides to help you with everything:\r\n\r\n<ListOfGuides />\r\n\r\nThanks for stopping by!\r\n"},{"url":"/basics/guides","content":"<script>\r\n import ListOfEsentials from '$lib/components/listofEssential.svelte';\r\n import ListOfBasic from '$lib/components/listofBasic.svelte';\r\n import ListOfAdvance from '$lib/components/listofAdvance.svelte';\r\nimport ListOfGuides from '$lib/components/listofGuides.svelte';\r\n\r\n</script>\r\n\r\n# Guides\r\n\r\n`Guides` were designed to take you from `zero to hero!`\r\n\r\n<ListOfGuides />\r\n\r\n## Essential\r\n<ListOfEsentials />\r\n\r\n## Basics\r\n\r\n<ListOfBasic />\r\n\r\n## Advance\r\n<ListOfAdvance />\r\n\r\n## Expert\r\n\r\n"},{"url":"/library/qa","content":"# Q&A\r\n\r\nHere all common questions about the project"}]